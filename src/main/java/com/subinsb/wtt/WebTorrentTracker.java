package com.subinsb.wtt;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;

import com.google.gson.Gson;


/**
 * A simple WebTorrent Tracker implementation
 */
public class WebTorrentTracker extends WebSocketServer {

    private boolean	destroyed = false;

    private FastTracker tracker;

    private HashMap<WebSocket, Peer> peers = new HashMap<WebSocket, Peer>();

    public WebTorrentTracker( InetSocketAddress address ) {
        super( address );
        this.tracker = new FastTracker();
    }

    @Override
    public void onOpen( WebSocket conn, ClientHandshake handshake ) {
        Utils.log("d", "connected " + conn.getRemoteSocketAddress().getAddress().getHostAddress() );
        // TODO websocketCount
        peers.put(conn, new Peer(conn));
    }

    @Override
    public void onClose( WebSocket conn, int code, String reason, boolean remote ) {
        Utils.log("d", conn + " has disconnected" );

        Peer peer = this.peers.get(conn);
        if (peer.id != null) {
            this.tracker.disconnectPeer(peer);
        }
        peer = null;
        this.peers.remove(conn);
    }

    @Override
    public void onMessage( WebSocket conn, String message ) {
        // Utils.log("d", conn + ": " + message );

        try {
            Gson gson = new Gson();
            TrackerMessage tm = gson.fromJson(message, TrackerMessage.class);

            Peer peer = this.peers.get(conn);
            this.tracker.processMessage(tm, peer);
        } catch (Throwable e) {
            e.printStackTrace();
            Utils.log("e", "Invalid JSON. Error : " + e.getMessage());
        }
    }

    @Override
    public void onError( WebSocket conn, Exception ex ) {
        ex.printStackTrace();
        if( conn != null ) {
            // some errors like port binding failed may not be assignable to a specific websocket
        }
    }

    @Override
    public void onStart() {
        System.out.println("Server started!");
        setConnectionLostTimeout(0);
        setConnectionLostTimeout(100);
    }

    public static void main( String[] args ) throws InterruptedException , IOException {
        WebTorrentTracker wt = new WebTorrentTracker(new InetSocketAddress("0.0.0.0", 8085));
        wt.setReuseAddr(true);
        wt.start();
    }
}

